package validarrangementofpairs

import (
	"reflect"
	"testing"
)

func Test_validArrangement(t *testing.T) {
	type args struct {
		pairs [][]int
	}
	tests := []struct {
		name string
		args args
		want [][]int
	}{
		{
			args: args{
				pairs: [][]int{{0, 1}},
			},
			want: [][]int{{0, 1}},
		},
		{
			args: args{
				pairs: [][]int{{1, 2}, {0, 1}},
			},
			want: [][]int{{0, 1}, {1, 2}},
		},
		{
			args: args{
				pairs: [][]int{{0, 1}, {0, 2}, {1, 0}},
			},
			want: [][]int{{0, 1}, {1, 0}, {0, 2}},
		},
		{
			args: args{
				pairs: [][]int{{5, 1}, {4, 5}, {11, 9}, {9, 4}},
			},
			want: [][]int{{11, 9}, {9, 4}, {4, 5}, {5, 1}},
		},
		{
			args: args{
				pairs: [][]int{{1, 3}, {3, 2}, {2, 1}},
			},
			want: [][]int{{1, 3}, {3, 2}, {2, 1}},
		},
		{
			args: args{
				pairs: [][]int{{5, 1}, {4, 5}, {11, 9}, {9, 4}},
			},
			want: [][]int{{11, 9}, {9, 4}, {4, 5}, {5, 1}},
		},
		{
			args: args{
				pairs: [][]int{{229, 699}, {489, 928}, {92, 398}, {457, 398}, {798, 838}, {75, 547}, {856, 141}, {838, 141}, {356, 578}, {819, 537}, {229, 458}, {229, 838}, {473, 175}, {545, 826}, {705, 75}, {132, 262}, {92, 974}, {141, 547}, {856, 92}, {229, 856}, {838, 826}, {798, 15}, {892, 157}, {578, 229}, {458, 905}, {141, 856}, {157, 458}, {157, 489}, {92, 458}, {838, 699}, {905, 458}, {547, 798}, {928, 157}, {974, 15}, {545, 132}, {545, 15}, {141, 132}, {458, 175}, {856, 586}, {175, 705}, {547, 229}, {928, 771}, {157, 671}, {175, 473}, {132, 229}, {838, 671}, {458, 356}, {262, 838}, {75, 262}, {92, 798}, {156, 671}, {356, 124}, {547, 175}, {262, 457}, {705, 545}, {671, 156}, {928, 671}, {578, 892}, {483, 856}, {586, 141}, {141, 838}, {974, 928}, {356, 157}, {398, 586}, {15, 157}, {905, 175}, {856, 157}, {157, 856}, {398, 771}, {892, 586}, {974, 473}, {262, 458}, {175, 141}, {458, 92}, {175, 856}, {905, 974}, {928, 229}, {826, 699}, {826, 483}, {826, 905}, {905, 838}, {928, 356}, {974, 905}, {124, 356}, {124, 537}, {771, 545}, {262, 771}, {157, 928}, {229, 157}, {547, 141}, {928, 75}, {262, 974}, {856, 798}, {92, 132}, {15, 141}, {141, 819}, {458, 15}, {141, 905}, {458, 928}, {537, 586}, {92, 819}, {473, 262}, {578, 473}, {141, 458}, {15, 856}, {132, 798}, {537, 974}, {586, 398}, {928, 141}, {141, 262}, {771, 141}, {458, 974}, {157, 771}, {398, 175}, {838, 974}, {826, 92}, {175, 892}, {974, 157}, {838, 356}, {699, 229}, {356, 489}, {15, 771}, {771, 905}, {586, 92}, {771, 92}, {798, 826}, {92, 537}, {699, 458}, {671, 928}, {771, 928}, {398, 928}, {699, 157}, {458, 157}, {537, 905}, {974, 578}, {671, 92}, {671, 75}, {157, 75}, {156, 838}, {473, 398}, {928, 705}, {15, 458}, {705, 458}, {157, 15}, {819, 124}, {157, 92}, {699, 928}, {905, 699}, {798, 262}, {458, 547}, {586, 856}, {974, 489}, {856, 545}, {75, 974}, {75, 578}, {905, 826}, {856, 705}, {489, 547}},
			},
			want: [][]int{{156, 838}, {838, 356}, {356, 489}, {489, 547}, {547, 141}, {141, 262}, {262, 974}, {974, 489}, {489, 928}, {928, 705}, {705, 458}, {458, 547}, {547, 175}, {175, 892}, {892, 586}, {586, 856}, {856, 705}, {705, 545}, {545, 15}, {15, 458}, {458, 157}, {157, 92}, {92, 537}, {537, 905}, {905, 826}, {826, 92}, {92, 819}, {819, 124}, {124, 537}, {537, 974}, {974, 578}, {578, 473}, {473, 398}, {398, 928}, {928, 141}, {141, 458}, {458, 974}, {974, 157}, {157, 15}, {15, 771}, {771, 928}, {928, 75}, {75, 578}, {578, 892}, {892, 157}, {157, 75}, {75, 974}, {974, 905}, {905, 699}, {699, 928}, {928, 356}, {356, 157}, {157, 771}, {771, 92}, {92, 132}, {132, 798}, {798, 262}, {262, 771}, {771, 905}, {905, 838}, {838, 974}, {974, 473}, {473, 262}, {262, 458}, {458, 928}, {928, 229}, {229, 157}, {157, 928}, {928, 671}, {671, 75}, {75, 262}, {262, 457}, {457, 398}, {398, 175}, {175, 856}, {856, 545}, {545, 132}, {132, 229}, {229, 856}, {856, 798}, {798, 826}, {826, 905}, {905, 974}, {974, 928}, {928, 771}, {771, 141}, {141, 905}, {905, 175}, {175, 141}, {141, 819}, {819, 537}, {537, 586}, {586, 92}, {92, 798}, {798, 15}, {15, 856}, {856, 157}, {157, 856}, {856, 586}, {586, 398}, {398, 771}, {771, 545}, {545, 826}, {826, 483}, {483, 856}, {856, 92}, {92, 458}, {458, 15}, {15, 141}, {141, 838}, {838, 671}, {671, 92}, {92, 974}, {974, 15}, {15, 157}, {157, 671}, {671, 156}, {156, 671}, {671, 928}, {928, 157}, {157, 458}, {458, 92}, {92, 398}, {398, 586}, {586, 141}, {141, 132}, {132, 262}, {262, 838}, {838, 699}, {699, 458}, {458, 356}, {356, 124}, {124, 356}, {356, 578}, {578, 229}, {229, 838}, {838, 826}, {826, 699}, {699, 229}, {229, 458}, {458, 905}, {905, 458}, {458, 175}, {175, 473}, {473, 175}, {175, 705}, {705, 75}, {75, 547}, {547, 798}, {798, 838}, {838, 141}, {141, 856}, {856, 141}, {141, 547}, {547, 229}, {229, 699}, {699, 157}, {157, 489}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := validArrangement(tt.args.pairs); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("validArrangement() = %v, want %v", got, tt.want)
			}
		})
	}
}
